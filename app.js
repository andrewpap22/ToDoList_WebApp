//jshint esversion:6

const express = require("express");
const bodyParser = require("body-parser");

const mongoose = require("mongoose");

const _ = require("lodash");

const app = express();

app.set('view engine', 'ejs');

app.use(bodyParser.urlencoded({
  extended: true
}));
app.use(express.static("public"));

/* instead of storing the items of the todo list inside the arrays, we'll use the mongo database (using mongoose) */
// const items = ["Buy Food", "Cook Food", "Eat Food"];
// const workItems = [];

// create a new database inside local mongodb
// mongoose.connect("mongodb://localhost:27017/todolistDB", {
//   useNewUrlParser: true,
//   useUnifiedTopology: true
// });

//create a new database inside mongodb atlas! (online mongodb)
mongoose.connect("mongodb+srv://admin-matsi22:$warcraft22;p@cluster22.gn0e8.mongodb.net/todolistDB", {useNewUrlParser: true, useUnifiedTopology: true});



//create the items schema
const itemsSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, "Please provide an item name for the list!"]
  }
});

//after the schema create the model:
const Item = mongoose.model("Item", itemsSchema);

// create 3 new items to pass as default to our newListItems bellow in the app.get 

const item1 = new Item({
  name: "Welcome to your toDoList!"
});

const item2 = new Item({
  name: "Hit the + button to add a new item."
});

const item3 = new Item({
  name: "<--- Hit this to delete an item."
});

const defaultItems = [item1, item2, item3]; //now we'll use that array to store at 1 go the 3 items in the collection.

// we'll create here a new schema for the new todolists created by the user...

const listSchema = new mongoose.Schema({
  name: String,
  items: [itemsSchema] //second field is an array of itemsSchema based items...
  /* For every new list that we create... the list is going to have a name, and an array of item documents 
   * associated with it as well... */
});

//create model... from the new listSchema...

const List = mongoose.model("List", listSchema);

/* Now that we created our new model from our listSchema, we're ready to create new list documents based on this model...
 * and we're going to do that when a user tries to access a new custom list name... inside in the app.get("/:listId") 
 * express routing. */

//remember to comment out after inserting so we dont get duplicates....!!!

// Item.deleteOne({name : "<--- Hit this to delete an item."}, function(err) {
//   if (err) {
//     console.log(err);
//   } else {
//     console.log("deleted item...");
//   }
// });

//BUT INSTEAD OF F!@#$#@! COMMENT OUT THE DAMN FUNCTION, THERE IS A BETTER WAY OF DOING THINGS....
//check below...

app.get("/", function (req, res) {

  Item.find({}, function (err, foundItems) {
    if (err) {
      console.log(err);
    } else if (foundItems.length === 0) { //if the array of objects is empty... (that is when db is empty...)
      Item.insertMany(defaultItems, function (err) { // then and ONLY then, add the 3 default items
        if (err) {
          console.log(err);
        } else {
          console.log("Successfully added the default items to the collection!");
        }
      }); //here we insert the items and the else if ends.. so we won't render the items to the webpage but... (see below)
      res.redirect("/"); //this makes the flow of the program come into the else statement after inserting the items to the db...
    } else { //and then they'll get rendered to the webpage, but they won't be copied again when we rerun the server...
      res.render("list", {
        listTitle: "Today.",
        newListItems: foundItems
      }); //passing the 3 default found items we created..
    }
  });
});

/* Create a dynamically path generated by the user in the browser, so they can make new todolists with the exact 
 * same functionallity as the home page todo list with the help of express routing... 
 * that way we won't have to create an app.get and an app.post for every new route.... */

app.get("/:listId", function (req, res) { //whatever the user types after the / will be generated as a new route...
  const eachList = _.capitalize(req.params.listId); //making Home or home basically simple Home so they are the same.

  List.findOne({
    name: eachList
  }, function (err, foundList) {
    if (!err) { //if there's no error
      if (!foundList) { //if foundList doesn't exist...
        // this should be where we create a new list...
        const list = new List({
          name: eachList, //storing whatever list name the user types in the browser...
          items: defaultItems //giving for each new list that the user creates, the default list items we have on the homepage
        });
        list.save(); //save each list the user creates to the list collection in mongodb...
        res.redirect("/" + eachList); //so same with above.. we got to redirect to each list the user creates and get into the else statement below after saving and show it to the user...
      } else {
        // this is the path where we should show an existing list...
        res.render("list", {
          listTitle: foundList.name, // the title of each list will be whatever the user types...
          newListItems: foundList.items
        });
      }
    } else {
      console.log(err);
    }
  });
});

app.post("/", function (req, res) {

  const itemName = req.body.newItem;
  const listName = req.body.list; 
  //with the addition of the value = listTitle inside the list.ejs 
  // we know got access to the list title as well.... 
  // so now each time the user adds a new item the his own newly created list we can redirect him the item back
  // to his own created list and not to the home page todolist...

  const item = new Item({
    name: itemName //creating a new document for the collection based on what the user types...
  });
  /* No matter which list the item came from, we still need to create it as a new item document... */ 

  //so we'll make our checks to which list to send it below it's creation...

  if (listName === "Today.") { //checking if it's the default todolist (Homepage...)
    item.save(); //and saving it in the database
    res.redirect("/"); //after we save our item we redirect to the home route app.get and we find all the items we got,
  // on the db and we render it on the screen...
  } else { // if the list isn't the homepage... 
    //then the item comes from another list
    // in which case we need to search for that list document in our lists collecton in our database and add the item
    // and embed it into the existing array of items... 
    List.findOne({name : listName}, function(err, foundList) {
      foundList.items.push(item); //tapping into the items array of the List model and pushing the new item to that array
      foundList.save(); //saving the new item to the collection...
      res.redirect("/" + listName); //and redirecting NOT to the home route, but to whichever list the user created and added the new item...
    });
  }
});

app.post("/delete", function (req, res) {
  const checkedItemId = req.body.checkbox; //after the code implemented on list.ejs now we got the id from the mongodb of the item being checked... So now it is easy to delete it... 

  const listName = req.body.listName;

  if(listName === "Today.") {
    Item.findByIdAndRemove(checkedItemId, function (err) { //finds a particular item in the db by it's id and removes it from the db...
    if (err) {
      console.log(err);
    } else {
      console.log("Successfully deleted the requested item...");
      res.redirect("/");
    }
  });
  } else { //delete item request comes from a custom list and not the home page
    List.findOneAndUpdate({name : listName}, {$pull : {items : {_id : checkedItemId}}}, function(err, foundList) {
      if (!err) {
        res.redirect("/" + listName);
      }
    });
  }
});

app.get("/about", function (req, res) {
  res.render("about");
});

app.listen(3000, function () {
  console.log("Server started on port 3000");
});